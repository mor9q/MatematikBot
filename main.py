import telegram
import logging
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler
)

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN

# –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

bot = telegram.Bot(token=BOT_TOKEN)


# reply_keyboard = [["–£—á–µ–±–Ω–∏–∫ üìö", "–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úçÔ∏è"], ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öôÔ∏è"]]
# markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


# –ö–æ–º–∞–Ω–¥—ã
async def start(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    try:
        reply_keyboard = [["–£—á–µ–±–Ω–∏–∫ üìö", "–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úç"], ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öô"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        # await update.message.reply_text("", reply_markup=markup)

        user = update.effective_user
        chat_id = update.message.chat_id
        photo_path = "data/penguin.gif"

        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µüíØ", )

        await context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, 'rb'))

        await update.message.reply_text(
            "–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∏–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –∏ —Ç–µ—Å—Ç—ã. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –º–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.")


    except Exception as ex:
        print(f"ERROR {ex}")


async def tutorial(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /tutorial"""

    keyboard = [
        [
            InlineKeyboardButton("1", callback_data='–ó–∞–¥–Ω–∏–µ 1'),
            InlineKeyboardButton("2", callback_data='–ó–∞–¥–Ω–∏–µ 2'),
            InlineKeyboardButton("3", callback_data='–ó–∞–¥–Ω–∏–µ 3')
        ],

        [
            InlineKeyboardButton("4", callback_data='–ó–∞–¥–Ω–∏–µ 4'),
            InlineKeyboardButton("5", callback_data='–ó–∞–¥–Ω–∏–µ 5'),
            InlineKeyboardButton("6", callback_data='–ó–∞–¥–Ω–∏–µ 6')
        ],

        [
            InlineKeyboardButton("7", callback_data='–ó–∞–¥–Ω–∏–µ 7'),
            InlineKeyboardButton("8", callback_data='–ó–∞–¥–Ω–∏–µ 8'),
            InlineKeyboardButton("9", callback_data='–ó–∞–¥–Ω–∏–µ 9')
        ],

        [
            InlineKeyboardButton("10", callback_data='–ó–∞–¥–Ω–∏–µ 10'),
            InlineKeyboardButton("11", callback_data='–ó–∞–¥–Ω–∏–µ 11'),
            InlineKeyboardButton("12", callback_data='–ó–∞–¥–Ω–∏–µ 12')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:', reply_markup=reply_markup)


async def practice(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /practice"""

    keyboard = [
        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 1", callback_data='–ó–∞–¥–Ω–∏–µ 1'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 2", callback_data='–ó–∞–¥–Ω–∏–µ 2'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 3", callback_data='–ó–∞–¥–Ω–∏–µ 3')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 4", callback_data='–ó–∞–¥–Ω–∏–µ 4'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 5", callback_data='–ó–∞–¥–Ω–∏–µ 5'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 6", callback_data='–ó–∞–¥–Ω–∏–µ 6')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 7", callback_data='–ó–∞–¥–Ω–∏–µ 7'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 8", callback_data='–ó–∞–¥–Ω–∏–µ 8'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 9", callback_data='–ó–∞–¥–Ω–∏–µ 9')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 10", callback_data='–ó–∞–¥–Ω–∏–µ 10'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 11", callback_data='–ó–∞–¥–Ω–∏–µ 11'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 12", callback_data='–ó–∞–¥–Ω–∏–µ 12')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Ä–µ—à–∏–≤–∞–Ω–∏—è üëá", reply_markup=reply_markup)


async def button(update, context) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")


# –û—Ç–≤–µ—Ç—ã
async def handler_response(update, context):
    ...


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tutorial", tutorial))
    application.add_handler(CommandHandler("practice", practice))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Regex("–£—á–µ–±–Ω–∏–∫ üìö"), tutorial))
    application.add_handler(MessageHandler(filters.Regex("–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úç"), practice))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
