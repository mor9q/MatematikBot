import telegram
import logging
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler
)

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN
import sqlite3

# –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

bot = telegram.Bot(token=BOT_TOKEN)


# reply_keyboard = [["–£—á–µ–±–Ω–∏–∫ üìö", "–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úçÔ∏è"], ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öôÔ∏è"]]
# markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def read_blob_data(emp_id):
    try:
        sqlite_connection = sqlite3.connect('sqlite_python.db')
        cursor = sqlite_connection.cursor()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")

        sql_fetch_blob_query = """SELECT * from data_theory"""
        cursor.execute(sql_fetch_blob_query)
        record = cursor.fetchall()
        for row in record:
            print("Id =", row[0], "Name =", row[1])
            name = row[1]
            photo = row[2]
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ \n")

            photo_path = f"{name}.jpg"
            write_to_file(photo, photo_path)

        cursor.close()

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


# –ö–æ–º–∞–Ω–¥—ã
async def start(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    try:
        reply_keyboard = [["–£—á–µ–±–Ω–∏–∫ üìö", "–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úç"], ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öô"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        # await update.message.reply_text("", reply_markup=markup)

        user = update.effective_user
        chat_id = update.message.chat_id
        photo_path = "db/start.gif"

        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µüíØ", )

        await context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, 'rb'))

        await update.message.reply_text(
            "–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∏–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –∏ —Ç–µ—Å—Ç—ã. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –º–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.")


    except Exception as ex:
        print(f"ERROR {ex}")


async def tutorial(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /tutorial"""

    keyboard = [
        [
            InlineKeyboardButton("1", callback_data='tutorial 1'),
            InlineKeyboardButton("2", callback_data='tutorial 2'),
            InlineKeyboardButton("3", callback_data='tutorial 3')
        ],

        [
            InlineKeyboardButton("4", callback_data='tutorial 4'),
            InlineKeyboardButton("5", callback_data='tutorial 5'),
            InlineKeyboardButton("6", callback_data='tutorial 6')
        ],

        [
            InlineKeyboardButton("7", callback_data='tutorial 7'),
            InlineKeyboardButton("8", callback_data='tutorial 8'),
            InlineKeyboardButton("9", callback_data='tutorial 9')
        ],

        [
            InlineKeyboardButton("10", callback_data='tutorial 10'),
            InlineKeyboardButton("11", callback_data='tutorial 11'),
            InlineKeyboardButton("12", callback_data='tutorial 12')
        ],
        [
            InlineKeyboardButton("–ù–µ –ø–æ–º–Ω—é, —á—Ç–æ –≤ –∫–∞–∫–æ–º –∑–∞–¥–∞–Ω–∏–∏ ü§î", callback_data='tutorial info')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:', reply_markup=reply_markup)


async def practice(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /practice"""

    keyboard = [
        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 1", callback_data='practice 1'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 3", callback_data='practice 3')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 4", callback_data='practice 4'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 5", callback_data='practice 5'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 6", callback_data='practice 6')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 7", callback_data='practice 7'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 8", callback_data='practice 8'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 9", callback_data='practice 9')
        ],

        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 10", callback_data='practice 10'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 11", callback_data='practice 11'),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 12", callback_data='practice 12')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Ä–µ—à–∏–≤–∞–Ω–∏—è üëá", reply_markup=reply_markup)


TASK = 1


async def button(update, context) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""

    global TASK
    query = update.callback_query
    chat_id = query.message.chat_id
    query.answer()
    task_type, number_task = query.data.split()

    sqlite_connection = sqlite3.connect('sqlite_python.db')
    cursor = sqlite_connection.cursor()
    sql_fetch_blob_query = f"""SELECT * from data_theory WHERE id={number_task}"""
    cursor.execute(sql_fetch_blob_query)
    record = cursor.fetchall()


    if task_type == "tutorial":
        if number_task == "info":
            text = """  
            1. –ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è
2. –í–µ–∫—Ç–æ—Ä—ã
3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è
4. –ü—Ä–æ—Å—Ç–∞—è –¢–µ–æ—Ä–∏—è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
5. –°–ª–æ–∂–Ω–∞—è –¢–µ–æ—Ä–∏—è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
6. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ
7. –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
8. –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
9. –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
10. –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞
11. –§—É–Ω–∫—Ü–∏–∏
12. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
            """
            await query.message.reply_text(text)
        else:
            tutorial_photo_path = record[0][2]
            url = record[0][4]
            text = f"–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é ‚Ññ{number_task} üëá"

            await query.message.reply_text(text)
            await context.bot.send_document(chat_id=chat_id, document=open(tutorial_photo_path, "rb"))
            await query.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {url}")


    elif task_type == "practice":
        practice_file_path = record[0][1]

        text = f"–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é ‚Ññ{number_task} üëá"
        TASK = number_task

        keyboard = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã:", callback_data="answer 1")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text)
        await context.bot.send_document(chat_id=chat_id, document=open(practice_file_path, "rb"),
                                        reply_markup=reply_markup)
    elif task_type == "answer":
        answer_file_path = record[0][3]
        text = f"–û—Ç–≤–µ—Ç—ã –∫ –∑–∞–¥–∞–Ω–∏—é ‚Ññ{TASK} üëá"
        await query.message.reply_text(text)
        await context.bot.send_document(chat_id=chat_id, document=open(answer_file_path, "rb"))


# –û—Ç–≤–µ—Ç—ã
async def handler_response(update, context) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = update.message.chat_id
    text = update.message.text
    if text == "1":
        photo_path = "data/task1.jpg"
        await context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, "rb"))
    elif text == "2":
        photo_path = "data/task2.jpg"
        await context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, "rb"))


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tutorial", tutorial))
    application.add_handler(CommandHandler("practice", practice))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button))
    # –°–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.Regex("–£—á–µ–±–Ω–∏–∫ üìö"), tutorial))
    application.add_handler(MessageHandler(filters.Regex("–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚úç"), practice))
    application.add_handler(MessageHandler(filters.TEXT, handler_response))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
